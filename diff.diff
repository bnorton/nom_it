diff --git a/app/controllers/comments_controller.rb b/app/controllers/comments_controller.rb
index 84d8af3..5825b2a 100644
--- a/app/controllers/comments_controller.rb
+++ b/app/controllers/comments_controller.rb
@@ -3,8 +3,8 @@ class CommentsController < ApplicationController
   respond_to :json
   
   before_filter :lat_lng_user
-  before_filter :check_params,  :only => [:recommendation,:location,:user]
-  before_filter :search_params, :only => [:search,:create]
+  before_filter :other_params
+  before_filter :search_params
   before_filter :authentication_required, :only => [:create]
   
   def recommendation
@@ -40,7 +40,7 @@ class CommentsController < ApplicationController
   private 
   
   def comments(method_name)
-    comments = Comment.send(:"for_#{method_name}_nid", @comment_nid, {:start=>@start,:limit=>@limit})
+    comments = Comment.search(@search, {:start=>@start,:limit=>@limit})
     prepared = Util.prepare(comments)
     respond_with ok_or_not(prepared)
   end
@@ -53,7 +53,7 @@ class CommentsController < ApplicationController
     end
   end
   
-  def check_params
+  def other_params
     @comment_nid = params[:comment_nid]
     @start = params[:start]
     @limit = Util.limit(params[:limit])
diff --git a/app/controllers/images_controller.rb b/app/controllers/images_controller.rb
index cdff9b3..92ec1c7 100644
--- a/app/controllers/images_controller.rb
+++ b/app/controllers/images_controller.rb
@@ -9,11 +9,11 @@ class ImagesController < ApplicationController
 
   def create
     @image = Image.new(params[:image])
-    @image.nid = Util.ID
+    @image.image_nid = Util.ID
     @image.user_nid = @user_nid
     @image.location_nid = @location_nid
     resp = if @image.save
-      Status.image_saved(@image.nid)
+      Status.image_saved(@image.image_nid)
     else
       Status.item_not_created 'image'
     end
diff --git a/app/controllers/locations_controller.rb b/app/controllers/locations_controller.rb
index 6a8d60e..fdbab31 100644
--- a/app/controllers/locations_controller.rb
+++ b/app/controllers/locations_controller.rb
@@ -83,7 +83,7 @@ class LocationsController < ApplicationController
     geolocation_params
     
     @creation = {
-      :nid => @nid,
+      :user_nid => @user_nid,
       :auth_token => @auth_token,
       :name => @name,
       :text => @text,
diff --git a/app/controllers/recommendations_controller.rb b/app/controllers/recommendations_controller.rb
index 50773b2..7d1fcb0 100644
--- a/app/controllers/recommendations_controller.rb
+++ b/app/controllers/recommendations_controller.rb
@@ -56,7 +56,7 @@ class RecommendationsController < ApplicationController
   end
 
   def recommend(method_name)
-    recs = Recommend.send(:"for_#{method_name}_nid", @nid)
+    recs = Recommend.send(:"for_#{method_name}_nid", @recommendation_nid)
     recs = Util.prepare(recs)
     respond_with ok_or_not(recs.present?,{:recommends=>recs})
   end
@@ -94,9 +94,9 @@ class RecommendationsController < ApplicationController
   end
 
   def required_for_destroy
-    @recid = params[:nid] || params[:recommendation]
+    @recommendation_nid = params[:recommendation_nid]
     @user_nid  = params[:user_nid]
-    if @recid.blank? || @user_nid.blank?
+    if @recommendation_nid.blank? || @user_nid.blank?
       respond_with Status.item_not_destroyed 'recommendation'
     end
   end
@@ -117,8 +117,8 @@ class RecommendationsController < ApplicationController
   end
 
   def id_only
-    @nid = params[:nid]
-    respond_with Status.not_found 'comments' if @nid.blank?
+    @recommendation_nid = params[:recommendation_nid]
+    respond_with Status.not_found 'recommendation' if @recommendation_nid.blank?
   end
 
   def optional
diff --git a/app/controllers/users_controller.rb b/app/controllers/users_controller.rb
index b4a2249..2e228ec 100644
--- a/app/controllers/users_controller.rb
+++ b/app/controllers/users_controller.rb
@@ -4,8 +4,8 @@ class UsersController < ApplicationController
   respond_to :json
   
   before_filter :lat_lng_user
-  before_filter :user_params,       :only => [:me, :login, :register,:thumbs,:thumbed]
-  before_filter :auth_params,       :only => [:me, :login, :register]
+  before_filter :user_params,       :only => [:me,:login,:register,:thumbs,:thumbed]
+  before_filter :auth_params,       :only => [:me,:login,:register]
   before_filter :login_required,    :only => [:login]
   before_filter :search_params,     :only => [:search]
   before_filter :validate_nids,     :only => [:detail,:thumbs,:thumbed]
@@ -109,8 +109,9 @@ class UsersController < ApplicationController
   end
   
   def user_params
-    @to_user_nid=params[:to_user_nid]
-    @email  = params[:email]
+    @user_nid = params[:user_nid]
+    @to_user_nid = params[:to_user_nid]
+    @email = params[:email]
     @screen_name  = params[:screen_name]
     @FBHash = params[:fbhash]
     @TWHash = params[:twhash]
diff --git a/app/helpers/geocode.rb b/app/helpers/geocode.rb
index 271c80c..9655d16 100644
--- a/app/helpers/geocode.rb
+++ b/app/helpers/geocode.rb
@@ -121,7 +121,7 @@ class Geocode
       iid = Util.ID
       addr,neigh,street = yahoo_addr_neighbor(yahoo)
       if (found = Location.find_by_location_hash(opt[:location_hash]))
-        [found.nid, false]
+        [found.location_nid, false]
       else
         Location.find_or_create_by_location_hash(
           :location_hash => opt[:location_hash],
@@ -141,7 +141,7 @@ class Geocode
           :timeofday => opt[:tod],
           :woeid => yahoo.woeid,
           :yid => yahoo.hash,
-          :nid => iid)
+          :location_nid => iid)
         [iid, true]
       end
     end
@@ -158,7 +158,7 @@ class Geocode
     end
     
     def store_metadata(opt={})
-      if Metadata.create(opt[:nid])
+      if Metadata.create(opt[:location_nid])
         Metadata.set_yelp_items(opt)
       else
         raise "Metadata not created for #{opt.inspect}"
@@ -205,7 +205,7 @@ class Geocode
         
         Category.normalize!(cats)
         store_metadata({
-          :nid => location_nid,
+          :location_nid => location_nid,
           :yelp_rating => _rating,
           :yelp_count => _rating_count,
           :categories => cats
diff --git a/app/helpers/nom_rank.rb b/app/helpers/nom_rank.rb
index d1605ff..633cf53 100644
--- a/app/helpers/nom_rank.rb
+++ b/app/helpers/nom_rank.rb
@@ -19,9 +19,9 @@ class NomRank
       @locations = NomRank.next
       while @locations.present?
         @locations.each do |l|
-          meta = Metadata.for_nid(l.nid)
+          meta = Metadata.for_nid(l.location_nid)
           value = NomRank.extract_features(meta)
-          @all_items << {:nid => l.nid, :value => value}
+          @all_items << {:nid => l.location_nid, :value => value}
         end
         @locations = NomRank.next
       end
@@ -40,7 +40,7 @@ class NomRank
         per = 0
         while j < limit && j < @all_items.length
           nid = @all_items[j][:nid]
-          loc = Location.find_by_nid(nid)
+          loc = Location.find_by_location_nid(nid)
           loc.rank = value
           loc.save
           if loc = Geolocation.find_by_location_nid(nid)
diff --git a/app/models/detail.rb b/app/models/detail.rb
index dcfc3c1..6d968c3 100644
--- a/app/models/detail.rb
+++ b/app/models/detail.rb
@@ -30,7 +30,7 @@ class Detail < MongoRuby
   def build_detail_for_token(token)
     record = Detail.for_token(token)
     recommendation = Recommendation.for_nid(record['rnid'])
-    nid = recommendation['nid']
+    nid = recommendation.recommendation_nid
     meta = Metadata.find_by_nid(nid)
     if recommendation && meta
       Metadata.viewed(nid)
diff --git a/app/models/follower.rb b/app/models/follower.rb
index f8d9e1a..9ef5f5f 100644
--- a/app/models/follower.rb
+++ b/app/models/follower.rb
@@ -77,11 +77,11 @@ class Follower < ActiveRecord::Base
     return false if me.blank? || other.blank?
     my_name = me.name || me.screen_name
     other_name = other.name || other.screen_name
-    f = Follower.new_or_old(user_nid,other.nid)
-    f.user_nid = me.nid
+    f = Follower.new_or_old(user_nid,other.user_nid)
+    f.user_nid = me.user_nid
     f.user_name = my_name
     f.user_city = me.city
-    f.to_user_nid = other.nid
+    f.to_user_nid = other.user_nid
     f.to_name = other_name
     if options[:hasnt_joined]
       f.approved = false
@@ -89,29 +89,27 @@ class Follower < ActiveRecord::Base
       f.approved = true
     end
     f.save
-    User.for_nid(other.nid)
+    User.for_nid(other.user_nid)
   end
   
   def self.user_has_joined(to_nid)
     return if (to = Follower.find_by_to_user_nid(to_nid)).blank?
-    Array(to).each do |t|
-      t.approved = true
-      t.save
-    end
+    to.approved = true
+    to.save
   end
   
   # user_nid is following to_user_nid
   def self.unfollow(user_nid,to_user_nid)
-    to_user_nid     = User.find_by_any_means_necessary(to_user_nid)
-    follower = Follower.find_by_user_nid_and_to_user_nid(user_nid,to_user_nid.nid)
-    return false if follower.blank? || to_user_nid.blank?
+    to_user     = User.find_by_any_means_necessary(to_user_nid)
+    follower = Follower.find_by_user_nid_and_to_user_nid(user_nid,to_user.user_nid)
+    return false if follower.blank? || to_user.blank?
     follower.delete!
   end
   
   def self.block_follower(user_nid,to_user_nid)
     user_nid = Util.STRINGify(user_nid)
     to_user_nid = Util.STRINGify(to_user_nid)
-    to_user_nid = User.find_by_any_means_necessary(to_user_nid).nid
+    to_user_nid = User.find_by_any_means_necessary(to_user_nid).user_nid
     follower = fields.find_by_to_user_nid_and_user_nid(user_nid,to_user_nid)
     return false if follower.blank? || to_user_nid.blank?
     follower.approved = false
diff --git a/app/models/geolocation.rb b/app/models/geolocation.rb
index 9e94b87..ff2a218 100644
--- a/app/models/geolocation.rb
+++ b/app/models/geolocation.rb
@@ -27,7 +27,7 @@ class Geolocation < ActiveRecord::Base
   def self.create_item(opt)
     if ((nid = opt[:location_nid]) && (lat = opt[:lat]) && (lng = opt[:lng]))
       Geolocation.find_or_create_by_nid_and_lat_and_lng(
-        :nid => nid,
+        :location_nid => nid,
         :lat => lat,
         :lng => lng,
         :cost => opt[:cost],
diff --git a/app/models/image.rb b/app/models/image.rb
index 91f143c..0b1ce56 100644
--- a/app/models/image.rb
+++ b/app/models/image.rb
@@ -19,7 +19,7 @@ class Image < ActiveRecord::Base
   
   def self.for_nid(image_nid,options={})
     # Rails.cache.fetch("single_image_nid_#{image_nid}_size#{options[:size] || :medium}", :expires_in => 1.day) do
-      Image.build_image(Image.find_by_nid(image_nid),options)
+      Image.build_image(Image.find_by_image_nid(image_nid),options)
     # end
   end
   
diff --git a/app/models/location.rb b/app/models/location.rb
index 66b177e..b3d4629 100644
--- a/app/models/location.rb
+++ b/app/models/location.rb
@@ -1,6 +1,6 @@
 class Location < ActiveRecord::Base
 
-  COMPACT = "nid as location_nid,rank,created_at,updated_at,name,address,cross_street,street,city,state,fsq_id,gowalla_url"
+  COMPACT = "location_nid,rank,created_at,updated_at,name,address,cross_street,street,city,state,fsq_id,gowalla_url"
 
   has_many :images
   has_one  :geolocation
@@ -33,14 +33,14 @@ class Location < ActiveRecord::Base
     new_nid = Util.ID
     created_loc = Location.find_or_create_by_name_and_creator(
       :name => opt[:name],
-      :creator => opt[:nid],
+      :creator => opt[:user_nid],
       :primary => opt[:primary],
       :secondary => opt[:secondary],
       :city => opt[:city],
       :text => opt[:text],
       :phone => opt[:phone],
       :cost => opt[:cost],
-      :nid => new_nid)
+      :location_nid => new_nid)
     opt.merge!({:location_nid => new_nid})
     created_geo = Geolocation.create_item(opt)
     return true if created_loc && created_geo
@@ -51,12 +51,12 @@ class Location < ActiveRecord::Base
   # @optional :street
   # @optional :city
   def self.search(opt,start=0,lim=10)
-    nid = Util.STRINGify(opt[:nid])
+    location_nid = Util.STRINGify(opt[:location_nid])
     name = opt[:name]
     street = opt[:street]
     city = opt[:city]
-    if nid.present?
-      result = compact.OL(start,lim).order(:rank).find_by_nid(nid)
+    if location_nid.present?
+      result = compact.OL(start,lim).order(:rank).find_by_location_nid(location_nid)
       built = Array(Location.detail_for_nid(result['location_nid'],location=result))
     else
       if opt[:lat] && opt[:lng]
@@ -73,23 +73,23 @@ class Location < ActiveRecord::Base
   
   def self.compact_detail_for_nid(location_nid)
     # Rails.cache.fetch("compact_detail_for_nid_#{location_nid}", :expires_in => 5.minutes) do
-      Location.compact.find_by_nid(location_nid)
+      Location.compact.find_by_location_nid(location_nid)
     # end
   end
   
-  def self.detail_for_nid(nid,location=nil,geolocation=nil)
-    nid = Util.STRINGify(nid)
+  def self.detail_for_nid(location_nid,location=nil,geolocation=nil)
+    location_nid = Util.STRINGify(location_nid)
     if location.present?
       detail = location.as_json
     else
-      detail = find_by_nid(nid).as_json
+      detail = find_by_location_nid(location_nid).as_json
     end
-    meta = Metadata.for_nid(nid)
-    Metadata.returned(nid)
-    thumb = Thumb.detail_for_nid(nid)
-    images = Image.for_location_nid(nid)
-    average = RankingAverage.ranking_total(nid)
-    geo = geolocation || Geolocation.for_location_nid(nid)
+    meta = Metadata.for_nid(location_nid)
+    Metadata.returned(location_nid)
+    thumb = Thumb.detail_for_nid(location_nid)
+    images = Image.for_location_nid(location_nid)
+    average = RankingAverage.ranking_total(location_nid)
+    geo = geolocation || Geolocation.for_location_nid(location_nid)
     detail.merge!(thumb)
     detail.merge({
       :metadata => meta,
@@ -111,12 +111,13 @@ class Location < ActiveRecord::Base
     real_result = []
     unless results.blank? || !(results = results.as_json)
       results.each do |result|
+        location_nid = result['location_nid']
         real_result << if what == :location
-          Location.detail_for_nid(result['nid'],result)
+          Location.detail_for_nid(location_nid,result)
         elsif what == :geolocation
-          Location.detail_for_nid(result['location_nid'],nil,result)
+          Location.detail_for_nid(location_nid,nil,result)
         else
-          Location.detail_for_nid(result['nid'])
+          Location.detail_for_nid(location_nid)
         end
       end
     end
diff --git a/app/models/locations_init.rb b/app/models/locations_init.rb
index 2a2a981..bcc8a0b 100644
--- a/app/models/locations_init.rb
+++ b/app/models/locations_init.rb
@@ -10,19 +10,19 @@ class LocationsInit
       nid3 = Util.ID
       
       Location.create({
-        :nid => nid1,
+        :location_nid => nid1,
         :name => 'location name 1',
         :address => '14 darrell pl',
         :primary => cat1
       })
       Location.create({
-        :nid => nid2,
+        :location_nid => nid2,
         :name => 'location name 2',
         :address => '2670 parker st',
         :primary => cat2
       })
       Location.create({
-        :nid => nid3,
+        :location_nid => nid3,
         :name => 'location name 3',
         :address => '201 11th st',
         :primary => cat3
diff --git a/app/models/metadata.rb b/app/models/metadata.rb
index b126b11..e68d868 100644
--- a/app/models/metadata.rb
+++ b/app/models/metadata.rb
@@ -32,7 +32,7 @@ class Metadata < MongoRuby
   end
   
   def self.set_attributes(attribs,valid_items)
-    return false unless (nid = attribs[:nid])
+    return false unless (nid = attribs[:location_nid])
     item = Metadata.find_one({ :_id => nid })
     attribs.keys.each do |k|
       if valid_items.include?(k) || valid_items.include?(k.to_sym)
@@ -43,12 +43,12 @@ class Metadata < MongoRuby
   end
   
   def self.set_region_counts(attribs)
-    return false unless attribs[:nid]
+    return false unless attribs[:location_nid]
     Metadata.set_attributes(attribs,VALID_COUNTS)
   end
   
   def self.set_yelp_items(attribs)
-    return false unless attribs[:nid]
+    return false unless attribs[:location_nid]
     Metadata.set_attributes(attribs,VALID_YELP)
   end
   
diff --git a/app/models/recommend.rb b/app/models/recommend.rb
index ca5cb1b..22c3a1e 100644
--- a/app/models/recommend.rb
+++ b/app/models/recommend.rb
@@ -34,7 +34,7 @@ class Recommend < MongoRuby
         :to_unid => follower_nid,
         :name => r.location_name,
         :city => r.location_city,
-        :rnid => r.nid,
+        :rnid => r.recommendation_nid,
         :token => r.token #,
         # :inid => r.image_nid
       })
diff --git a/app/models/recommendation.rb b/app/models/recommendation.rb
index 8b889bf..ac30ae9 100644
--- a/app/models/recommendation.rb
+++ b/app/models/recommendation.rb
@@ -39,7 +39,8 @@ class Recommendation < ActiveRecord::Base
     r.location_name = this[:name]
     r.location_city = this[:city]
     r.image_nid = this[:image_nid]
-    r.nid = Util.ID
+    rnid = Util.ID
+    r.recommendation_nid = rnid
     r.token = this[:token] || Util.token
     
     if this[:text]
@@ -48,8 +49,8 @@ class Recommendation < ActiveRecord::Base
       r.text = "I really like #{r.location_name || '...'} and recommended it via Nom. justnom.it/r/#{r.token}"
     end
     if r.save
-      Metadata.recommended(r.nid) # for item analytics
-      Recommendation.find_by_nid(r.nid)
+      Metadata.recommended(rnid) # for item analytics
+      Recommendation.find_by_nid(rnid)
     end
   end
   
diff --git a/app/models/user.rb b/app/models/user.rb
index 94f8279..871827c 100644
--- a/app/models/user.rb
+++ b/app/models/user.rb
@@ -9,7 +9,7 @@ class User < ActiveRecord::Base
     offset(offset).limit(limit)
   }
   scope :follower_fields, lambda {
-    select("nid as user_nid,screen_name,name,facebook,image_url,city,follower_count,created_at")
+    select("user_nid,screen_name,name,facebook,image_url,city,follower_count,created_at")
   }
   scope :public_fields, lambda {
     select(User.fields)
@@ -18,7 +18,7 @@ class User < ActiveRecord::Base
     select(User.fields(:private))
   }
   scope :private_nid, lambda {|nid|
-    private_fields.where(["nid=?",nid])
+    private_fields.where(["user_nid=?",nid])
   }
   scope :me, lambda {|token|
     private_fields.where(["auth_token=?",token])
@@ -30,42 +30,42 @@ class User < ActiveRecord::Base
     where(["has_joined=0"])
   }
   scope :find_by_nid_or_email, lambda {|nid|
-    public_fields.where(["nid=? or email=?", nid, nid]).has_joined
+    public_fields.where(["user_nid=? or email=?", nid, nid]).has_joined
   }
   scope :login_with_nid_or_email, lambda {|nid|
-    select("salt,password").where(["nid=? or email=? or screen_name=?",nid,nid,nid]).has_joined
+    select("salt,password").where(["user_nid=? or email=? or screen_name=?",nid,nid,nid]).has_joined
   }
   scope :find_by_any_means, lambda {|id|
     items = [id,id,id,id,id]
-    public_fields.where(["nid=? or screen_name=? or email=? or facebook=? or twitter=?",*items])
+    public_fields.where(["user_nid=? or screen_name=? or email=? or facebook=? or twitter=?",*items])
   }
   scope :find_by_not_yet_joined, lambda {|identifier|
     find_by_any_means(identifier).hasnt_joined
   }
   scope :detail_for_nids, lambda {|nids,lim|
-    public_fields.where(["nid in (?)", nids.split(',')]).limit(lim)
+    public_fields.where(["user_nid in (?)", nids.split(',')]).limit(lim)
   }
   scope :find_by_like_name, lambda {|name,lim|
     public_fields.where(["name like ?", "%#{name}%"]).has_joined.limit(lim)
   }
   scope :search_by_all, lambda {|identifier,limit|
     list = [identifier,identifier,identifier]
-    public_fields.where(["name like ? or nid=? or email=? or screen_name=?", "%#{identifier}%",*list]).has_joined
+    public_fields.where(["name like ? or user_nid=? or email=? or screen_name=?", "%#{identifier}%",*list]).has_joined
   }
   
   def self.for_nid(nid)
     nid = Util.STRINGify(nid)
-    public_fields.find_by_nid(nid)
+    public_fields.find_by_user_nid(nid)
   end
   
   def self.follower(list_of)
-    User.follower_fields.find_all_by_nid(list_of)
+    User.follower_fields.find_all_by_user_nid(list_of)
   end
   
   def self.token_match?(nid, token)
     begin
       i = me
-      nid == i(token).nid
+      nid == i(token).user_nid
     rescue Exception
       false
     end
@@ -93,52 +93,56 @@ class User < ActiveRecord::Base
     return User.private_fields.find_by_email(email) if User.login(email,pass,username)
     user = new_or_hasnt_joined(email)
     return false if user.blank?
-    user.email    = email
-    user.salt     = rand(1<<32).to_s
+    user.email = email
+    user.salt = rand(1<<32).to_s
     user.password = Digest::SHA2.hexdigest(user.salt.to_s + pass, 256)
-    user.last_seen= Time.now
-    user.has_joined= true
-    user.screen_name=username
+    user.last_seen = Time.now
+    user.has_joined = true
+    user.screen_name = username
     user.name = name
     user.city = city
     user.auth_token = User.new_auth_token
-    user.nid      ||= Util.ID
+    user.user_nid ||= Util.ID
     user.save
     User.private_fields.find_by_email(email)
   end
   
   def self.register_with_facebook(fbHash,username='')
-    user = new_or_hasnt_joined(fbHash['id'])
+    return false if (fb_id = fbHash['id']).blank?
+    user = new_or_hasnt_joined(fb_id)
+    return false if user.blank?
     user.facebook_hash = fbHash
     user.screen_name = username
-    user.facebook = fbHash['id']
-    user.name     = fbHash['name']
-    user.token    = email_token
-    user.url      = "https://graph.facebook.com/#{user.facebook}/picture"
-    user.last_seen= Time.now
-    location      = fbHash['locaton']
+    user.facebook = fb_id
+    user.name = fbHash['name']
+    user.token = email_token
+    user.image_url = "https://graph.facebook.com/#{user.facebook}/picture"
+    user.last_seen = Time.now
+    location = fbHash['locaton']
     user.city, user.state = Util.parse_location(location)
     user.token_expires = Time.now + 14.days
-    user.has_joined= true
+    user.has_joined = true
     user.auth_token = User.new_auth_token
-    user.nid    ||= Util.ID
+    user.user_nid ||= Util.ID
     user.save
   end
   
   def self.register_with_twitter(twHash,username='',email='')
-    user = new_or_hasnt_joined(twHash['id'])
+    return false if (tw_id = twHash['id']).blank?
+    user = new_or_hasnt_joined(tw_id)
+    return false if user.blank?
     user.twitter_hash = twHash
     user.screen_name = username
-    user.email    = email
-    user.twitter  = twHash['id']
-    user.name     = twHash['name']
-    user.url      = twHash['profile_image_url']
-    user.token    = email_token
-    user.last_seen= Time.now
+    user.email = email
+    user.twitter = tw_id
+    user.name = twHash['name']
+    user.image_url = twHash['profile_image_url']
+    user.token = email_token
+    user.last_seen = Time.now
     user.city, user.state = Util.parse_location(twHash['location'])
     user.token_expires = Time.now + 14.days
-    user.has_joined= true
-    user.nid     ||= Util.ID
+    user.has_joined = true
+    user.user_nid ||= Util.ID
     user.save
   end
     
@@ -146,9 +150,10 @@ class User < ActiveRecord::Base
     user = User.find_by_any_means(identifier).first
     if user.blank?
       return User.new
+    else 
+      return nil if user.has_joined == true
+      Follower.user_has_joined(user.user_nid)
     end
-    return nil if user.has_joined == true
-    Follower.user_has_joined(user.nid)
     user
   end
   
@@ -160,14 +165,14 @@ class User < ActiveRecord::Base
     token = email_token
     user.token        = token
     user.token_expires= email_token_expires
-    user.nid          = Util.ID
+    user.user_nid          = Util.ID
     ## - warning   #####################################################
     ## - make sure that we know this is not a valid user as they      ##
     ##    are here because someone followed them via some identifier  ##
     user.has_joined = false                                           ##
     ## end warning #####################################################
     if user.save
-      User.find_by_token(token)
+      User.public_fields.find_by_token(token)
     end
   end
   
@@ -184,7 +189,7 @@ class User < ActiveRecord::Base
   end
   
   def self.fields(opt=:public)
-    fields = "nid as user_nid,name,image_url,url,last_seen,city,screen_name,follower_count,description,created_at,has_joined"
+    fields = "user_nid,name,image_url,url,last_seen,city,screen_name,follower_count,description,created_at,has_joined"
     if opt == :private
       fields << ",auth_token,street,country,email,phone,facebook,twitter"
     end
diff --git a/db/schema.rb b/db/schema.rb
index 1785227..0d85e36 100644
--- a/db/schema.rb
+++ b/db/schema.rb
@@ -10,7 +10,7 @@
 #
 # It's strongly recommended to check this file into your version control system.
 
-ActiveRecord::Schema.define(:version => 20111127012326) do
+ActiveRecord::Schema.define(:version => 20111128045134) do
 
   create_table "followers", :force => true do |t|
     t.datetime "created_at"
@@ -49,7 +49,7 @@ ActiveRecord::Schema.define(:version => 20111127012326) do
     t.string   "image_content_type"
     t.string   "image_file_size"
     t.datetime "image_updated_at"
-    t.string   "nid"
+    t.string   "image_nid"
     t.string   "user_nid"
     t.string   "location_nid"
   end
@@ -57,7 +57,7 @@ ActiveRecord::Schema.define(:version => 20111127012326) do
   create_table "locations", :force => true do |t|
     t.datetime "created_at"
     t.datetime "updated_at"
-    t.string   "nid"
+    t.string   "location_nid"
     t.string   "name"
     t.string   "fsq_name"
     t.string   "fsq_id"
@@ -93,13 +93,13 @@ ActiveRecord::Schema.define(:version => 20111127012326) do
     t.string   "rank"
   end
 
-  add_index "locations", ["nid"], :name => "index_locations_on_nid", :unique => true
+  add_index "locations", ["location_nid"], :name => "index_locations_on_nid", :unique => true
 
   create_table "recommendations", :force => true do |t|
     t.datetime "created_at"
     t.datetime "updated_at"
-    t.string   "nid"
-    t.string   "user_nid",                         :null => false
+    t.string   "recommendation_nid"
+    t.string   "user_nid",                              :null => false
     t.string   "user_name"
     t.string   "location_nid"
     t.string   "location_name"
@@ -107,24 +107,24 @@ ActiveRecord::Schema.define(:version => 20111127012326) do
     t.string   "token"
     t.string   "title"
     t.text     "text"
-    t.boolean  "facebook",      :default => false
-    t.boolean  "twitter",       :default => false
+    t.boolean  "facebook",           :default => false
+    t.boolean  "twitter",            :default => false
     t.float    "lat"
     t.float    "lng"
-    t.boolean  "new",           :default => true
+    t.boolean  "new",                :default => true
     t.binary   "schemaless"
-    t.boolean  "is_valid",      :default => true
+    t.boolean  "is_valid",           :default => true
     t.string   "image_nid"
   end
 
   add_index "recommendations", ["new"], :name => "recommendations_location_new"
-  add_index "recommendations", ["nid"], :name => "index_recommendations_on_nid", :unique => true
+  add_index "recommendations", ["recommendation_nid"], :name => "index_recommendations_on_nid", :unique => true
   add_index "recommendations", ["user_nid", "new"], :name => "recommendations_uid_new"
 
   create_table "users", :force => true do |t|
     t.datetime "created_at"
     t.datetime "updated_at"
-    t.string   "nid"
+    t.string   "user_nid"
     t.string   "name"
     t.string   "screen_name"
     t.string   "email"
@@ -165,9 +165,9 @@ ActiveRecord::Schema.define(:version => 20111127012326) do
 
   add_index "users", ["email"], :name => "users_email", :unique => true
   add_index "users", ["facebook"], :name => "users_facebook", :unique => true
-  add_index "users", ["nid"], :name => "index_users_on_nid", :unique => true
   add_index "users", ["screen_name"], :name => "users_screen_name", :unique => true
   add_index "users", ["token", "email"], :name => "users_token_email"
   add_index "users", ["twitter"], :name => "users_twitter", :unique => true
+  add_index "users", ["user_nid"], :name => "index_users_on_nid", :unique => true
 
 end
diff --git a/diff.diff b/diff.diff
index b973fb1..083f7d9 100644
--- a/diff.diff
+++ b/diff.diff
@@ -1,45 +0,0 @@
-diff --git a/app/helpers/util.rb b/app/helpers/util.rb
-index 3ea4e14..683c506 100644
---- a/app/helpers/util.rb
-+++ b/app/helpers/util.rb
-@@ -12,6 +12,14 @@ class Util
-       item
-     end
-     
-+    def created_atify(item)
-+      return item unless item.respond_to?(:delete)
-+      oid = item['_id']
-+      return item unless oid.respond_to?(:generation_time)
-+      item['created_at'] = item.delete('_id').generation_time
-+      item
-+    end
-+    
-     def translate!(items, mapper)
-       items.each do |it|
-         mapper.each_pair do |k,v|
-diff --git a/app/models/location.rb b/app/models/location.rb
-index a00c918..fc8189f 100644
---- a/app/models/location.rb
-+++ b/app/models/location.rb
-@@ -1,6 +1,6 @@
- class Location < ActiveRecord::Base
- 
--  COMPACT = "nid as location_nid,updated_at,name,address,cross_street,street,city,state,fsq_id,gowalla_url"
-+  COMPACT = "nid as location_nid,created_at,updated_at,name,address,cross_street,street,city,state,fsq_id,gowalla_url"
- 
-   has_many :images
-   has_one  :geolocation
-diff --git a/app/models/thumb.rb b/app/models/thumb.rb
-index 7c2b42e..6921c2b 100644
---- a/app/models/thumb.rb
-+++ b/app/models/thumb.rb
-@@ -33,8 +33,8 @@ class Thumb < MongoRuby
-   end
-   
-   def self.build_for_activity(thumb)
-+    thumb = Util.created_atify(thumb)
-     thumb = Util.nidify(thumb.as_json,'user_nid','unid')
--    thumb = Util.de_nid(thumb,'_id')
-     Util.de_nid(thumb,'nid')
-   end
-   ## methods that find ratings or totals
diff --git a/lib/correlate.rb b/lib/correlate.rb
index 5e15b31..a2a53fd 100644
--- a/lib/correlate.rb
+++ b/lib/correlate.rb
@@ -35,7 +35,7 @@ class Correlate
       this.state = corr['state']
       this.area_code = corr['zipc']
       this.country = corr['country']
-      this.nid = Util.ID;
+      this.location_nid = Util.ID;
       this.save
       end
       
diff --git a/spec/controllers/comments_controller_spec.rb b/spec/controllers/comments_controller_spec.rb
index 7c31e73..fb858ac 100644
--- a/spec/controllers/comments_controller_spec.rb
+++ b/spec/controllers/comments_controller_spec.rb
@@ -21,7 +21,6 @@ describe CommentsController do
     it "should make a new commnt about a location" do
       User.stub!(:valid_session?).and_return(true)
       post :create, :format => :json, :location_nid=>@lnid1, :auth_token => Digest::SHA2.hexdigest(rand(1<<16).to_s)
-      puts JSON.parse(response.body)
     end
     it "should make a new commnt about a user" do
       pending
diff --git a/spec/controllers/users_controller_spec.rb b/spec/controllers/users_controller_spec.rb
index debc083..719f21e 100644
--- a/spec/controllers/users_controller_spec.rb
+++ b/spec/controllers/users_controller_spec.rb
@@ -73,7 +73,7 @@ describe UsersController do
     end
     it "should login a user" do
       get(:search, :format => :json, :q => @nort[:email])
-      nid = JSON.parse(response.body)['results'][0]['nid']
+      nid = JSON.parse(response.body)['results'][0]['user_nid']
       get(:login, :format => :json, :user_nid => nid, :password => @nort[:password])
       JSON.parse(response.body)['status'].should == 1
     end
diff --git a/spec/models/follower_spec.rb b/spec/models/follower_spec.rb
index a44836e..d6f074e 100644
--- a/spec/models/follower_spec.rb
+++ b/spec/models/follower_spec.rb
@@ -18,9 +18,9 @@ describe "follower" do
   describe "create" do
     before :each do
       User.register(@brian[:email],@brian[:password],@brian[:screen_name])
-      @brian_nid = User.find_by_email(@brian[:email]).nid
+      @brian_nid = User.find_by_email(@brian[:email]).user_nid
       User.register(@mark[:email], @mark[:password],@mark[:screen_name])
-      @mark_nid  = User.find_by_email(@mark[:email]).nid
+      @mark_nid  = User.find_by_email(@mark[:email]).user_nid
     end
     it "should create a new follow relationship based on ID" do
       Follower.find_or_create(@brian_nid,@mark_nid,@mark)
@@ -46,7 +46,7 @@ describe "follower" do
   describe "not joined" do
     before :each do
       User.register(@brian[:email],@brian[:password],@brian[:screen_name])
-      @brian_nid = User.find_by_email(@brian[:email]).nid
+      @brian_nid = User.find_by_email(@brian[:email]).user_nid
       @random_email = 'some_random_email@gmail.com'
       Follower.find_or_create(@brian_nid,@random_email,{:email => @random_email})
     end
@@ -66,7 +66,7 @@ describe "follower" do
       newu.has_joined.should == false
       
       User.register(@random_email,'password','random')
-      newu   = User.find_by_email(@random_email)
+      newu = User.find_by_email(@random_email)
       newu.should_not be_blank
       newu.has_joined.should == true  # shoud now have joined
     end
@@ -89,7 +89,7 @@ describe "follower" do
       fbuser.should_not be_blank
       fbuser.has_joined.should == true
     end
-    after do
+    after :each do
       User.find_by_email(@brian[:email]).destroy
     end
   end
@@ -103,18 +103,18 @@ describe "follower" do
       @thr = User.find_by_email('some_other_email@gmail.com')
     end
     it "should find followers that have followed a user" do
-      Follower.find_or_create(@one.nid,@two.nid,@mark)
-      ones_followers = Follower.following(@one.nid)
+      Follower.find_or_create(@one.user_nid,@two.user_nid,@mark)
+      ones_followers = Follower.following(@one.user_nid)
       ones_followers.length.should == 1
-      Follower.find_or_create(@one.nid,@thr.nid,@brian)
-      @ones_followers = Follower.following(@one.nid)
+      Follower.find_or_create(@one.user_nid,@thr.user_nid,@brian)
+      @ones_followers = Follower.following(@one.user_nid)
       @ones_followers.length.should == 2
       valid, i = [], 0
       while i < @ones_followers.length
         o = @ones_followers[i]
-        if o.user_nid == @two.nid
+        if o.user_nid == @two.user_nid
           valid << true
-        elsif o.user_nid == @thr.nid
+        elsif o.user_nid == @thr.user_nid
           valid << true
         end
         i += 1
@@ -124,41 +124,41 @@ describe "follower" do
       valid[1].should == true
       
       # users that follow me should not have followers
-      twos_followers = Follower.following(@two.nid)
+      twos_followers = Follower.following(@two.user_nid)
       twos_followers.length.should == 0
       
-      thrs_followers = Follower.following(@thr.nid)
+      thrs_followers = Follower.following(@thr.user_nid)
       thrs_followers.length.should == 0
     end
     it "should find followers that a user follows" do
-      Follower.find_or_create(@two.nid,@one.nid,@mark)
-      Follower.find_or_create(@two.nid,@thr.nid,@brian)
+      Follower.find_or_create(@two.user_nid,@one.user_nid,@mark)
+      Follower.find_or_create(@two.user_nid,@thr.user_nid,@brian)
       
-      Follower.following(@two.nid).length.should == 2
-      Follower.followers(@one.nid).length.should == 1
-      Follower.followers(@thr.nid).length.should == 1
+      Follower.following(@two.user_nid).length.should == 2
+      Follower.followers(@one.user_nid).length.should == 1
+      Follower.followers(@thr.user_nid).length.should == 1
     end
     it "should not find users that have not yet joined" do
       sR = 'some_random_email2@gmail.com'
-      Follower.find_or_create(@two.nid,sR,{:screen_name=>'random_user',:email=>sR})
+      Follower.find_or_create(@two.user_nid,sR,{:screen_name=>'random_user',:email=>sR})
       
       some = User.find_by_email('some_random_email2@gmail.com')
       some.should_not be_blank
       some.has_joined.should == false
       
-      Follower.following(@two.nid).length.should  == 0
-      Follower.followers(@two.nid).length.should == 0
+      Follower.following(@two.user_nid).length.should  == 0
+      Follower.followers(@two.user_nid).length.should == 0
     end
     it "should find users that were not joined and that are now members" do
       sR = 'some_random_email2@gmail.com'
       random_user = {:screen_name=>'random_user',:email=>sR}
-      Follower.find_or_create(@two.nid,random_user[:email],random_user)
-      Follower.following(@two.nid).length.should  == 0
-      Follower.followers(@two.nid).length.should == 0
+      Follower.find_or_create(@two.user_nid,random_user[:email],random_user)
+      Follower.following(@two.user_nid).length.should  == 0
+      Follower.followers(@two.user_nid).length.should == 0
       
       User.register(random_user[:email],'password',random_user[:screen_name])
-      Follower.following(@two.nid).length.should  == 1
-      Follower.followers(@two.nid).length.should == 0
+      Follower.following(@two.user_nid).length.should  == 1
+      Follower.followers(@two.user_nid).length.should == 0
     end
     after do
       @one.destroy
diff --git a/spec/models/location_spec.rb b/spec/models/location_spec.rb
index a7e7858..d8bd3ec 100644
--- a/spec/models/location_spec.rb
+++ b/spec/models/location_spec.rb
@@ -12,17 +12,17 @@ describe "locations" do
       @nid2 = Util.ID
       @nid3 = Util.ID
       Location.create({
-        :nid => @nid1,
+        :location_nid => @nid1,
         :name => 'location name 1',
         :address => '14 darrell pl',
         :primary => '4e234'})
       Location.create({
-        :nid => @nid2,
+        :location_nid => @nid2,
         :name => 'location 2',
         :address => '2670 parker st',
         :primary => '4e235'})
       Location.create({
-        :nid => @nid3,
+        :location_nid => @nid3,
         :name => 'location name 3',
         :address => '201 11th st',
         :city => 'seal beach',
@@ -76,7 +76,7 @@ describe "locations" do
       found = Location.search(here)
       found.class.should == Array
       found.length.should == 1
-      found[0]['nid'].should == @nid1
+      found[0]['location_nid'].should == @nid1
     end
     it "should find a location based on street/city" do
       here = {:street => '201 11th',:city => 'seal beach'}
diff --git a/spec/models/user_spec.rb b/spec/models/user_spec.rb
index b8b1853..4a79968 100644
--- a/spec/models/user_spec.rb
+++ b/spec/models/user_spec.rb
@@ -47,14 +47,14 @@ describe "user" do
       User.login(@brian[:email],@brian[:password]).should == true
     
       brian = User.find_by_email(@brian[:email])
-      User.login(brian.nid, @brian[:password]).should == true
+      User.login(brian.user_nid, @brian[:password]).should == true
     end
   end
   describe "searching" do
     before :each do
-      @brian_nid = User.register(@brian[:email],@brian[:password],@brian[:screen_name]).nid
-      @mark_nid  = User.register(@mark[:email], @mark[:password], @mark[:screen_name] ).nid
-      @third_nid = User.register(@third[:email],@third[:password],@third[:screen_name]).nid
+      @brian_nid = User.register(@brian[:email],@brian[:password],@brian[:screen_name]).user_nid
+      @mark_nid  = User.register(@mark[:email], @mark[:password], @mark[:screen_name] ).user_nid
+      @third_nid = User.register(@third[:email],@third[:password],@third[:screen_name]).user_nid
     end
     it "should find the users by id" do
       User.find_by_any_means_necessary(@brian_nid).should_not be_blank
